// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: mygrpc.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type HelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request string `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mygrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mygrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_mygrpc_proto_rawDescGZIP(), []int{0}
}

func (x *HelloRequest) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

type HelloResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *HelloResponse) Reset() {
	*x = HelloResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mygrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResponse) ProtoMessage() {}

func (x *HelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mygrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResponse.ProtoReflect.Descriptor instead.
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return file_mygrpc_proto_rawDescGZIP(), []int{1}
}

func (x *HelloResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

var File_mygrpc_proto protoreflect.FileDescriptor

var file_mygrpc_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x79, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x2b, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xaf, 0x02, 0x0a,
	0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x16, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x47, 0x0a, 0x16, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x52, 0x0a, 0x1f, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x6e,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mygrpc_proto_rawDescOnce sync.Once
	file_mygrpc_proto_rawDescData = file_mygrpc_proto_rawDesc
)

func file_mygrpc_proto_rawDescGZIP() []byte {
	file_mygrpc_proto_rawDescOnce.Do(func() {
		file_mygrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_mygrpc_proto_rawDescData)
	})
	return file_mygrpc_proto_rawDescData
}

var file_mygrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_mygrpc_proto_goTypes = []interface{}{
	(*HelloRequest)(nil),  // 0: proto.HelloRequest
	(*HelloResponse)(nil), // 1: proto.HelloResponse
}
var file_mygrpc_proto_depIdxs = []int32{
	0, // 0: proto.HelloService.HelloWorld:input_type -> proto.HelloRequest
	0, // 1: proto.HelloService.HelloWorldServerStream:input_type -> proto.HelloRequest
	0, // 2: proto.HelloService.HelloWorldClientStream:input_type -> proto.HelloRequest
	0, // 3: proto.HelloService.HelloWorldClientAndServerStream:input_type -> proto.HelloRequest
	1, // 4: proto.HelloService.HelloWorld:output_type -> proto.HelloResponse
	1, // 5: proto.HelloService.HelloWorldServerStream:output_type -> proto.HelloResponse
	1, // 6: proto.HelloService.HelloWorldClientStream:output_type -> proto.HelloResponse
	1, // 7: proto.HelloService.HelloWorldClientAndServerStream:output_type -> proto.HelloResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_mygrpc_proto_init() }
func file_mygrpc_proto_init() {
	if File_mygrpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mygrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mygrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mygrpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mygrpc_proto_goTypes,
		DependencyIndexes: file_mygrpc_proto_depIdxs,
		MessageInfos:      file_mygrpc_proto_msgTypes,
	}.Build()
	File_mygrpc_proto = out.File
	file_mygrpc_proto_rawDesc = nil
	file_mygrpc_proto_goTypes = nil
	file_mygrpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HelloServiceClient is the client API for HelloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloServiceClient interface {
	//一个简单的rpc
	HelloWorld(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	//一个服务器端流式rpc
	HelloWorldServerStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloService_HelloWorldServerStreamClient, error)
	//一个客户端流式rpc
	HelloWorldClientStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloWorldClientStreamClient, error)
	//一个客户端和服务器端双向流式rpc
	HelloWorldClientAndServerStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloWorldClientAndServerStreamClient, error)
}

type helloServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloServiceClient(cc grpc.ClientConnInterface) HelloServiceClient {
	return &helloServiceClient{cc}
}

func (c *helloServiceClient) HelloWorld(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/proto.HelloService/HelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServiceClient) HelloWorldServerStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloService_HelloWorldServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[0], "/proto.HelloService/HelloWorldServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceHelloWorldServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloService_HelloWorldServerStreamClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloServiceHelloWorldServerStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceHelloWorldServerStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) HelloWorldClientStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloWorldClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[1], "/proto.HelloService/HelloWorldClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceHelloWorldClientStreamClient{stream}
	return x, nil
}

type HelloService_HelloWorldClientStreamClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloServiceHelloWorldClientStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceHelloWorldClientStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceHelloWorldClientStreamClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) HelloWorldClientAndServerStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloWorldClientAndServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[2], "/proto.HelloService/HelloWorldClientAndServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceHelloWorldClientAndServerStreamClient{stream}
	return x, nil
}

type HelloService_HelloWorldClientAndServerStreamClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloServiceHelloWorldClientAndServerStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceHelloWorldClientAndServerStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceHelloWorldClientAndServerStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServiceServer is the server API for HelloService service.
type HelloServiceServer interface {
	//一个简单的rpc
	HelloWorld(context.Context, *HelloRequest) (*HelloResponse, error)
	//一个服务器端流式rpc
	HelloWorldServerStream(*HelloRequest, HelloService_HelloWorldServerStreamServer) error
	//一个客户端流式rpc
	HelloWorldClientStream(HelloService_HelloWorldClientStreamServer) error
	//一个客户端和服务器端双向流式rpc
	HelloWorldClientAndServerStream(HelloService_HelloWorldClientAndServerStreamServer) error
}

// UnimplementedHelloServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHelloServiceServer struct {
}

func (*UnimplementedHelloServiceServer) HelloWorld(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (*UnimplementedHelloServiceServer) HelloWorldServerStream(*HelloRequest, HelloService_HelloWorldServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloWorldServerStream not implemented")
}
func (*UnimplementedHelloServiceServer) HelloWorldClientStream(HelloService_HelloWorldClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloWorldClientStream not implemented")
}
func (*UnimplementedHelloServiceServer) HelloWorldClientAndServerStream(HelloService_HelloWorldClientAndServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloWorldClientAndServerStream not implemented")
}

func RegisterHelloServiceServer(s *grpc.Server, srv HelloServiceServer) {
	s.RegisterService(&_HelloService_serviceDesc, srv)
}

func _HelloService_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HelloService/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).HelloWorld(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloService_HelloWorldServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServiceServer).HelloWorldServerStream(m, &helloServiceHelloWorldServerStreamServer{stream})
}

type HelloService_HelloWorldServerStreamServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type helloServiceHelloWorldServerStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceHelloWorldServerStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloService_HelloWorldClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).HelloWorldClientStream(&helloServiceHelloWorldClientStreamServer{stream})
}

type HelloService_HelloWorldClientStreamServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloServiceHelloWorldClientStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceHelloWorldClientStreamServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceHelloWorldClientStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloService_HelloWorldClientAndServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).HelloWorldClientAndServerStream(&helloServiceHelloWorldClientAndServerStreamServer{stream})
}

type HelloService_HelloWorldClientAndServerStreamServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloServiceHelloWorldClientAndServerStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceHelloWorldClientAndServerStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceHelloWorldClientAndServerStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HelloService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HelloService",
	HandlerType: (*HelloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _HelloService_HelloWorld_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HelloWorldServerStream",
			Handler:       _HelloService_HelloWorldServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HelloWorldClientStream",
			Handler:       _HelloService_HelloWorldClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HelloWorldClientAndServerStream",
			Handler:       _HelloService_HelloWorldClientAndServerStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mygrpc.proto",
}
